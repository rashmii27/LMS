# -*- coding: utf-8 -*-
"""LMS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MnMPn-kQd0iJVqhHq7pevauyInHKwOo1

**LMS**
"""

import sqlite3

"""CONNECT TO DB"""

conn = sqlite3.connect('library.db')
cursor = conn.cursor()

"""Create Tables"""

cursor.execute('''
CREATE TABLE IF NOT EXISTS BookDetails(
    BookID INTEGER PRIMARY KEY AUTOINCREMENT,
    BookName TEXT,
    AuthorName TEXT,
    TotalCopies INTEGER,
    AvailableCopies INTEGER
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS BorrowerDetails (
    BorrowerID INTEGER PRIMARY KEY AUTOINCREMENT,
    BorrowerName TEXT,
    ContactInfo TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS LibraryDetails (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    BookID INTEGER,
    BorrowerID INTEGER,
    BorrowDate DATE,
    ReturnDate DATE,
    Status TEXT CHECK(Status ('borrow', 'return'))
)
''')

"""Data In Table"""

books = [
    ('Harry Potter 1', 'J.K. Rowling', 5, 5),
    ('Harry Potter 2', 'J.K. Rowling', 3, 3),
    ('Harry Potter 3', 'J.K. Rowling', 4, 4),
    ('Harry Potter 4', 'J.K. Rowling', 2, 2),
    ('Harry Potter 5', 'J.K. Rowling', 3, 3),
    ('Harry Potter 6', 'J.K. Rowling', 4, 4),
    ('Harry Potter 7', 'J.K. Rowling', 6, 6),
    ('The 48 Laws of Power', 'Robert Greene', 5, 5),
    ('War and Peace', 'Leo Tolstoy', 3, 3),
    ('The Odyssey', 'Homer', 2, 2),
    ('The Shining', 'Stephen King', 4, 4),
    ('The Da Vinci Code', 'Dan Brown', 5, 5),
    ('The Alchemist', 'Paulo Coelho', 3, 3),
    ('Little Women', 'Louisa Alcott', 6, 6),
    ('Animal Farm', 'George Orwell', 3, 3),
    ('The Picture of Dorian Gray', 'Oscar Wilde', 2, 2)
]

students = [
    ('Rashmi', 'rashmi@gmail.com'),
    ('Ram', 'ram@gmail.com'),
    ('Milo', 'milo@gmail.com'),
    ('Riddhi', 'riddhi@gmail.com'),
    ('Jerry', 'jerry@gmail.com'),
    ('Tom', 'tom@gmail.com'),
    ('Dan', 'dan@gmail.com')
]

conn.commit()

def borrow_book(book_id):
    cursor.execute("SELECT AvailableCopies FROM BookDetails")

    if result > 0:
        cursor.execute("UPDATE BookDetails SET AvailableCopies = AvailableCopies - 1 WHERE BookID = ?", (book_id,))


        print("Book {book_id} borrowed successfully!")
    else result:
        print("Sorry, book {book_id} is not available.")

def return_book(book_id):
    cursor.execute("SELECT AvailableCopies FROM BookDetails")

    if result:
        cursor.execute("UPDATE BookDetails SET AvailableCopies = AvailableCopies + 1 WHERE BookID = ?", (book_id,))


        print("Book {book_id} returned successfully!")
    else:
        print("Book {book_id} not found.")

def check_availability(book_id):
    cursor.execute("SELECT AvailableCopies FROM BookDetails)

    if result = available_copies

        available_copies > 0:
            print("Book {book_id} is available. {available_copies} copies left.")
        else:
            print("Book {book_id} is not available.")